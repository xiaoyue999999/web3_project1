{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {AggregatorV2V3Interface} from \"../interfaces/AggregatorV2V3Interface.sol\";\r\n\r\n/**\r\n * @title MockV3Aggregator\r\n * @notice Based on the FluxAggregator contract\r\n * @notice Use this contract when you need to test\r\n * other contract's ability to read data from an\r\n * aggregator contract, but how the aggregator got\r\n * its answer is unimportant\r\n */\r\n// solhint-disable\r\ncontract MockV3Aggregator is AggregatorV2V3Interface {\r\n  uint256 public constant override version = 0;\r\n\r\n  uint8 public override decimals;\r\n  int256 public override latestAnswer;\r\n  uint256 public override latestTimestamp;\r\n  uint256 public override latestRound;\r\n\r\n  mapping(uint256 => int256) public override getAnswer;\r\n  mapping(uint256 => uint256) public override getTimestamp;\r\n  mapping(uint256 => uint256) private getStartedAt;\r\n\r\n  constructor(uint8 _decimals, int256 _initialAnswer) {\r\n    decimals = _decimals;\r\n    updateAnswer(_initialAnswer);\r\n  }\r\n\r\n  function updateAnswer(int256 _answer) public {\r\n    latestAnswer = _answer;\r\n    latestTimestamp = block.timestamp;\r\n    latestRound++;\r\n    getAnswer[latestRound] = _answer;\r\n    getTimestamp[latestRound] = block.timestamp;\r\n    getStartedAt[latestRound] = block.timestamp;\r\n  }\r\n\r\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\r\n    latestRound = _roundId;\r\n    latestAnswer = _answer;\r\n    latestTimestamp = _timestamp;\r\n    getAnswer[latestRound] = _answer;\r\n    getTimestamp[latestRound] = _timestamp;\r\n    getStartedAt[latestRound] = _startedAt;\r\n  }\r\n\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    override\r\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\r\n  {\r\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\r\n  }\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    override\r\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\r\n  {\r\n    return (\r\n      uint80(latestRound),\r\n      getAnswer[latestRound],\r\n      getStartedAt[latestRound],\r\n      getTimestamp[latestRound],\r\n      uint80(latestRound)\r\n    );\r\n  }\r\n\r\n  function description() external pure override returns (string memory) {\r\n    return \"v0.8/tests/MockV3Aggregator.sol\";\r\n  }\r\n}"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport { AggregatorV3Interface } from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// 主要目的是收款\r\n/*\r\n1、创建一个收款函数\r\n2、记录投资人 并且查看\r\n3、在锁定期内，达到目标值，生产商可以提款\r\n4、在锁定期内 没有达到目标 给用户退款\r\n*/\r\n\r\n// payable 转账需要使用\r\n\r\ncontract FundMe {\r\n    AggregatorV3Interface public dataFeed;\r\n\r\n    // 构造函数  只有初始会执行\r\n    constructor(uint256 _lockTime, address defaAddr) {\r\n        lockTime = _lockTime;\r\n        deployTime = block.timestamp;\r\n        owner = msg.sender;\r\n        dataFeed = AggregatorV3Interface(defaAddr); //获取ETH链上地址初始化\r\n    }\r\n\r\n    // 最小投资单位 使用的主链的数量来进行对比 不是使用USD\r\n    // 10的18次方等于1个ETH\r\n    // uint256 REQUIRE_VALUE = 1 * 10 ** 18; // 至少1个ETH\r\n    uint256 constant REQUIRE_VALUE = 1 * 10 ** 18; // 至少需要一个USD\r\n\r\n    uint256 constant TARGET = 1000 * 10 ** 18; // 1000美刀目标\r\n\r\n    // 记录投资人 以及投资金额\r\n    mapping(address => uint256) public fundersToMoney;\r\n\r\n    address public owner;\r\n\r\n    // 合约部署时间\r\n    uint256 deployTime;\r\n    // 持续时间\r\n    uint256 lockTime;\r\n\r\n    // erc20地址\r\n    address erc20Addr;\r\n\r\n    bool public getFundSuccess = false;\r\n\r\n    // 转账\r\n    function fund () external payable {\r\n        // 最小值判断\r\n        require(convertEthtoUsd(msg.value) >= REQUIRE_VALUE, \"no money\");\r\n        // 时间范围判断\r\n        require(block.timestamp < (deployTime + lockTime), \"window is close\");\r\n        fundersToMoney[msg.sender] = msg.value;\r\n    }\r\n\r\n    // 在锁定期内，达到目标值，生产商可以提款\r\n    function getFund() external ownerVerify windowClose {\r\n        uint256 balanceMoney = convertEthtoUsd(address(this).balance); // 获取当前合约的余额 本身是wei单位 需要转换\r\n        require(balanceMoney >= TARGET, \"no 1000$\");\r\n\r\n        bool success;\r\n        (success,) = payable(owner).call{value: address(this).balance}(\"\");\r\n        getFundSuccess = true;\r\n    }\r\n\r\n    // 在锁定期内 没有达到目标 给用户退款\r\n    function reFund() external windowClose {\r\n        require(address(this).balance < TARGET, \"no satisfy money\");\r\n        require(fundersToMoney[msg.sender] > 0, \"no money\");\r\n\r\n        uint256 money = fundersToMoney[msg.sender];\r\n        fundersToMoney[msg.sender] = 0;\r\n        bool success;\r\n        (success,) = payable(msg.sender).call{value: money}(\"\");\r\n        require(success, \"transfer tx error\");\r\n    }\r\n\r\n    // owner提款\r\n    function withdraw() public ownerVerify {\r\n        uint256 constantBalance = address(this).balance;\r\n        require(constantBalance > 0, \"dayu 0\");\r\n\r\n        // 转账有三种方式 最常用的是call\r\n        // 1、transfer\r\n        // payable(msg.sender).transfer(constantBalance);\r\n        // 2、send\r\n        // bool success = payable(msg.sender).send(constantBalance);\r\n        // 3、call\r\n        // (success, result) = payable(msg.sender).call{value: constantBalance}(\"convertEthtoUsd\");\r\n        bool success;\r\n        (success,) = payable(msg.sender).call{value: constantBalance}(\"\");\r\n    }\r\n\r\n    function setFundersToMoney (address addr, uint256 count) public {\r\n        // 只有erc20这个合约可以更改这余额\r\n        require(msg.sender == erc20Addr, \"no owner\");\r\n        fundersToMoney[addr] = count;\r\n    }\r\n\r\n    function setErc20Addr (address _erc20Addr) public ownerVerify {\r\n        erc20Addr = _erc20Addr;\r\n    }\r\n\r\n    // 修改所有人\r\n    function changeOwner(address newOwner) external ownerVerify {\r\n        owner = newOwner;\r\n    }\r\n\r\n    // 修饰符 校验 判断当前人是否是owner\r\n    modifier ownerVerify() {\r\n        require(owner == msg.sender, \"no owner\");\r\n        _;\r\n    }\r\n\r\n    // 时间范围以外\r\n    modifier windowClose() {\r\n        require(block.timestamp >= (deployTime + lockTime), \"window is time close\");\r\n        _;\r\n    }\r\n\r\n    // 获取链上ETH价格\r\n    function getChainlinkDataFeedLatestAnswer() internal view returns (int) {\r\n        // prettier-ignore\r\n        (\r\n        /* uint80 roundID */,\r\n            int answer,\r\n        /*uint startedAt*/,\r\n        /*uint timeStamp*/,\r\n        /*uint80 answeredInRound*/\r\n        ) = dataFeed.latestRoundData();\r\n        return answer;\r\n    }\r\n\r\n    // 转换函数 从ETH -> USD\r\n    function convertEthtoUsd(uint256 value) internal view returns(uint256) {\r\n        // 获取链上 有精度的问题 需要转换\r\n        // ETH === USD   那么精度是10 ** 8次方\r\n        // 未知 === ETH   精度为 10 ** 18\r\n        uint256 ethPrice =  uint256(getChainlinkDataFeedLatestAnswer()); // 266635682783 当前eth价格为2666$\r\n        // uint256 ethPrice =  uint256(266635682783);\r\n        return value * ethPrice / (10 ** 8);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n// 这个合约主要做eth对usd价格对比\r\nimport \"@chainlink/contracts/src/v0.8/shared/mocks/MockV3Aggregator.sol\";"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}